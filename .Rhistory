mutate(name = fct_reorder(name, price, function (x) last(x)/first(x))) %>%
group_by(name) %>%
summarise(Inflation = last(price)/first(price))
ggplotly(
dt %>%
ggplot(aes(y = Inflation, x = name)) +
geom_hline(aes(yintercept = median(Inflation)), col = "#c97ef6") +
geom_segment(aes(x = name, y = 0.9, xend = name, yend = Inflation)) +
geom_point(size=2, color="aquamarine4") +
geom_text(aes(label = paste0(round(Inflation, 1), "X")), position = position_nudge(y = 0.1)) +
annotate("text", x = 3, y = median(dt$Inflation) + 0.5, label = paste0("Median: ", round(median(dt$Inflation), 1)), hjust = -0.1, col = "#c97ef6") +
coord_flip() +
scale_y_log10(breaks = c(1, 3, 10, 30, 100)) +
theme_bw(base_size = 16) +
theme(legend.position = "none", text = element_text(size = 9)) +
labs(x = "", y = "Inflation rate over time",
title = paste0("Price changes from 2000-2020 (", inflachoice, ")"))
)
}
macca_inflation_plot("asdsad")
macca_inflation_plot("usd")
library(dplyr)
library(forcats)
library(ggplot2)
macca_inflation_plot <- function(inflachoice) {
data <- maccaindex::macca_raw
data <- data %>%
select(1:12, -iso_a3)
data_test <- data %>%
group_by(name) %>%
count(name) %>%
filter(n == 33)
if (grepl("usd|us dollar|us", inflachoice, ignore.case = TRUE)) {
inflachoice <- "Dollar price"
} else {
inflachoice <- "Local price"
}
dt <- data %>%
inner_join(data_test, by = "name") %>%
select(name, price = ifelse(inflachoice == "Dollar price", "dollar_price", "local_price")) %>%
mutate(name = fct_reorder(name, price, function (x) last(x)/first(x))) %>%
group_by(name) %>%
summarise(Inflation = last(price)/first(price))
if (inflachoice == "Dollar price") {
plot <- ggplotly(
dt %>%
ggplot(aes(y = Inflation, x = name)) +
geom_hline(aes(yintercept = median(Inflation)), col = "#c97ef6") +
geom_segment(aes(x = name, y = 0.9, xend = name, yend = Inflation)) +
geom_point(size=2, color="aquamarine4") +
geom_text(aes(label = paste0(round(Inflation, 1), "X")), position = position_nudge(y = 0.03)) +
annotate("text", x = 3, y = median(dt$Inflation) + 0.5, label = paste0("Median: ", round(median(dt$Inflation), 1)), hjust = -0.1, col = "#c97ef6") +
coord_flip() +
scale_y_log10(breaks = c(1, 3, 10, 30, 100)) +
theme_bw(base_size = 16) +
theme(legend.position = "none", text = element_text(size = 9)) +
labs(x = "", y = "Inflation rate over time",
title = paste0("Price changes from 2000-2020 (", inflachoice, ")"))
)} else {
plot <- ggplotly(
dt %>%
ggplot(aes(y = Inflation, x = name)) +
geom_hline(aes(yintercept = median(Inflation)), col = "#c97ef6") +
geom_segment(aes(x = name, y = 0.9, xend = name, yend = Inflation)) +
geom_point(size=2, color="aquamarine4") +
geom_text(aes(label = paste0(round(Inflation, 1), "X")), position = position_nudge(y = 0.1)) +
annotate("text", x = 3, y = median(dt$Inflation) + 0.5, label = paste0("Median: ", round(median(dt$Inflation), 1)), hjust = -0.1, col = "#c97ef6") +
coord_flip() +
scale_y_log10(breaks = c(1, 3, 10, 30, 100)) +
theme_bw(base_size = 16) +
theme(legend.position = "none", text = element_text(size = 9)) +
labs(x = "", y = "Inflation rate over time",
title = paste0("Price changes from 2000-2020 (", inflachoice, ")"))
)
}
}
macca_inflation_plot("usd")
library(dplyr)
library(forcats)
library(ggplot2)
macca_inflation_plot <- function(inflachoice) {
data <- maccaindex::macca_raw
data <- data %>%
select(1:12, -iso_a3)
data_test <- data %>%
group_by(name) %>%
count(name) %>%
filter(n == 33)
if (grepl("usd|us dollar|us", inflachoice, ignore.case = TRUE)) {
inflachoice <- "Dollar price"
} else {
inflachoice <- "Local price"
}
dt <- data %>%
inner_join(data_test, by = "name") %>%
select(name, price = ifelse(inflachoice == "Dollar price", "dollar_price", "local_price")) %>%
mutate(name = fct_reorder(name, price, function (x) last(x)/first(x))) %>%
group_by(name) %>%
summarise(Inflation = last(price)/first(price))
if (inflachoice == "Dollar price") {
plot <- ggplotly(
dt %>%
ggplot(aes(y = Inflation, x = name)) +
geom_hline(aes(yintercept = median(Inflation)), col = "#c97ef6") +
geom_segment(aes(x = name, y = 0.9, xend = name, yend = Inflation)) +
geom_point(size=2, color="aquamarine4") +
geom_text(aes(label = paste0(round(Inflation, 1), "X")), position = position_nudge(y = 0.03)) +
annotate("text", x = 3, y = median(dt$Inflation) + 0.5, label = paste0("Median: ", round(median(dt$Inflation), 1)), hjust = -0.1, col = "#c97ef6") +
coord_flip() +
scale_y_log10(breaks = c(1, 3, 10, 30, 100)) +
theme_bw(base_size = 16) +
theme(legend.position = "none", text = element_text(size = 9)) +
labs(x = "", y = "Inflation rate over time",
title = paste0("Price changes from 2000-2020 (", inflachoice, ")"))
)} else {
plot <- ggplotly(
dt %>%
ggplot(aes(y = Inflation, x = name)) +
geom_hline(aes(yintercept = median(Inflation)), col = "#c97ef6") +
geom_segment(aes(x = name, y = 0.9, xend = name, yend = Inflation)) +
geom_point(size=2, color="aquamarine4") +
geom_text(aes(label = paste0(round(Inflation, 1), "X")), position = position_nudge(y = 0.1)) +
annotate("text", x = 3, y = median(dt$Inflation) + 0.5, label = paste0("Median: ", round(median(dt$Inflation), 1)), hjust = -0.1, col = "#c97ef6") +
coord_flip() +
scale_y_log10(breaks = c(1, 3, 10, 30, 100)) +
theme_bw(base_size = 16) +
theme(legend.position = "none", text = element_text(size = 9)) +
labs(x = "", y = "Inflation rate over time",
title = paste0("Price changes from 2000-2020 (", inflachoice, ")"))
)
}
}
macca_inflation_plot("usd")
macca_inflation_plot("asdsa")
library(dplyr)
library(forcats)
library(ggplot2)
macca_inflation_plot <- function(inflachoice) {
data <- maccaindex::macca_raw
data <- data %>%
select(1:12, -iso_a3)
data_test <- data %>%
group_by(name) %>%
count(name) %>%
filter(n == 33)
if (grepl("usd|us dollar|us", inflachoice, ignore.case = TRUE)) {
inflachoice <- "Dollar price"
} else {
inflachoice <- "Local price"
}
dt <- data %>%
inner_join(data_test, by = "name") %>%
select(name, price = ifelse(inflachoice == "Dollar price", "dollar_price", "local_price")) %>%
mutate(name = fct_reorder(name, price, function (x) last(x)/first(x))) %>%
group_by(name) %>%
summarise(Inflation = last(price)/first(price))
if (inflachoice == "Dollar price") {
plot <- ggplotly(
dt %>%
ggplot(aes(y = Inflation, x = name)) +
geom_hline(aes(yintercept = median(Inflation)), col = "#c97ef6") +
geom_segment(aes(x = name, y = 0.9, xend = name, yend = Inflation)) +
geom_point(size=2, color="aquamarine4") +
geom_text(aes(label = paste0(round(Inflation, 1), "X")), position = position_nudge(y = 0.03)) +
annotate("text", x = 3, y = median(dt$Inflation) + 0.5, label = paste0("Median: ", round(median(dt$Inflation), 1)), hjust = -0.1, col = "#c97ef6") +
coord_flip() +
scale_y_log10(breaks = c(1, 3, 10, 30, 100)) +
theme_bw(base_size = 16) +
theme(legend.position = "none", text = element_text(size = 9)) +
labs(x = "", y = "Inflation rate over time",
title = paste0("Price changes from 2000-2020 (", inflachoice, ")"))
)} else {
plot <- ggplotly(
dt %>%
ggplot(aes(y = Inflation, x = name)) +
geom_hline(aes(yintercept = median(Inflation)), col = "#c97ef6") +
geom_segment(aes(x = name, y = 0.9, xend = name, yend = Inflation)) +
geom_point(size=2, color="aquamarine4") +
geom_text(aes(label = paste0(round(Inflation, 1), "X")), position = position_nudge(y = 0.1)) +
annotate("text", x = 3, y = median(dt$Inflation) + 0.5, label = paste0("Median: ", round(median(dt$Inflation), 1)), hjust = -0.1, col = "#c97ef6") +
coord_flip() +
scale_y_log10(breaks = c(1, 3, 10, 30, 100)) +
theme_bw(base_size = 16) +
theme(legend.position = "none", text = element_text(size = 9)) +
labs(x = "", y = "Inflation rate over time",
title = paste0("Price changes from 2000-2020 (", inflachoice, ")"))
)
}
return(plot)
}
macca_inflation_plot("asdsa")
macca_inflation_plot("usd")
library(maccaindex)
devtools::load_all()
devtools::install()
library(maccaindex)
maccapp()
devtools::load_all()
devtools::document()
devtools::check()
devtools::check()
devtools::document()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::load_all()
devtools::check()
library(dplyr)
library(forcats)
library(ggplot2)
library(maccaindex)
macca_inflation_plot <- function(inflachoice) {
data <- maccaindex::macca_raw
data <- data %>%
select(1:12, -iso_a3)
data_test <- data %>%
group_by(name) %>%
count(name) %>%
filter(n == 33)
if (grepl("usd|us dollar|us", inflachoice, ignore.case = TRUE)) {
inflachoice <- "Dollar price"
} else {
inflachoice <- "Local price"
}
dt <- data %>%
inner_join(data_test, by = "name") %>%
select(name, price = ifelse(inflachoice == "Dollar price", "dollar_price", "local_price")) %>%
mutate(name = fct_reorder(name, price, function (x) last(x)/first(x))) %>%
group_by(name) %>%
summarise(Inflation = last(price)/first(price))
if (inflachoice == "Dollar price") {
plot <- ggplotly(
dt %>%
ggplot(aes(y = Inflation, x = name)) +
geom_hline(aes(yintercept = median(Inflation)), col = "#c97ef6") +
geom_segment(aes(x = name, y = 0.9, xend = name, yend = Inflation)) +
geom_point(size=2, color="aquamarine4") +
geom_text(aes(label = paste0(round(Inflation, 1), "X")), position = position_nudge(y = 0.03)) +
annotate("text", x = 3, y = median(dt$Inflation) + 0.5, label = paste0("Median: ", round(median(dt$Inflation), 1)), hjust = -0.1, col = "#c97ef6") +
coord_flip() +
scale_y_log10(breaks = c(1, 3, 10, 30, 100)) +
theme_bw(base_size = 16) +
theme(legend.position = "none", text = element_text(size = 9)) +
labs(x = "", y = "Inflation rate over time",
title = paste0("Price changes from 2000-2020 (", inflachoice, ")"))
)} else {
plot <- ggplotly(
dt %>%
ggplot(aes(y = Inflation, x = name)) +
geom_hline(aes(yintercept = median(Inflation)), col = "#c97ef6") +
geom_segment(aes(x = name, y = 0.9, xend = name, yend = Inflation)) +
geom_point(size=2, color="aquamarine4") +
geom_text(aes(label = paste0(round(Inflation, 1), "X")), position = position_nudge(y = 0.1)) +
annotate("text", x = 3, y = median(dt$Inflation) + 0.5, label = paste0("Median: ", round(median(dt$Inflation), 1)), hjust = -0.1, col = "#c97ef6") +
coord_flip() +
scale_y_log10(breaks = c(1, 3, 10, 30, 100)) +
theme_bw(base_size = 16) +
theme(legend.position = "none", text = element_text(size = 9)) +
labs(x = "", y = "Inflation rate over time",
title = paste0("Price changes from 2000-2020 (", inflachoice, ")"))
)
}
return(plot)
}
macca_inflation_plot("usd")
library(dplyr)
library(forcats)
library(ggplot2)
library(plotly)
library(maccaindex)
macca_inflation_plot <- function(inflachoice) {
data <- maccaindex::macca_raw
data <- data %>%
select(1:12, -iso_a3)
data_test <- data %>%
group_by(name) %>%
count(name) %>%
filter(n == 33)
if (grepl("usd|us dollar|us", inflachoice, ignore.case = TRUE)) {
inflachoice <- "Dollar price"
} else {
inflachoice <- "Local price"
}
dt <- data %>%
inner_join(data_test, by = "name") %>%
select(name, price = ifelse(inflachoice == "Dollar price", "dollar_price", "local_price")) %>%
mutate(name = fct_reorder(name, price, function (x) last(x)/first(x))) %>%
group_by(name) %>%
summarise(Inflation = last(price)/first(price))
if (inflachoice == "Dollar price") {
plot <- ggplotly(
dt %>%
ggplot(aes(y = Inflation, x = name)) +
geom_hline(aes(yintercept = median(Inflation)), col = "#c97ef6") +
geom_segment(aes(x = name, y = 0.9, xend = name, yend = Inflation)) +
geom_point(size=2, color="aquamarine4") +
geom_text(aes(label = paste0(round(Inflation, 1), "X")), position = position_nudge(y = 0.03)) +
annotate("text", x = 3, y = median(dt$Inflation) + 0.5, label = paste0("Median: ", round(median(dt$Inflation), 1)), hjust = -0.1, col = "#c97ef6") +
coord_flip() +
scale_y_log10(breaks = c(1, 3, 10, 30, 100)) +
theme_bw(base_size = 16) +
theme(legend.position = "none", text = element_text(size = 9)) +
labs(x = "", y = "Inflation rate over time",
title = paste0("Price changes from 2000-2020 (", inflachoice, ")"))
)} else {
plot <- ggplotly(
dt %>%
ggplot(aes(y = Inflation, x = name)) +
geom_hline(aes(yintercept = median(Inflation)), col = "#c97ef6") +
geom_segment(aes(x = name, y = 0.9, xend = name, yend = Inflation)) +
geom_point(size=2, color="aquamarine4") +
geom_text(aes(label = paste0(round(Inflation, 1), "X")), position = position_nudge(y = 0.1)) +
annotate("text", x = 3, y = median(dt$Inflation) + 0.5, label = paste0("Median: ", round(median(dt$Inflation), 1)), hjust = -0.1, col = "#c97ef6") +
coord_flip() +
scale_y_log10(breaks = c(1, 3, 10, 30, 100)) +
theme_bw(base_size = 16) +
theme(legend.position = "none", text = element_text(size = 9)) +
labs(x = "", y = "Inflation rate over time",
title = paste0("Price changes from 2000-2020 (", inflachoice, ")"))
)
}
return(plot)
}
macca_inflation_plot("usd")
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
?data
devtools::check()
devtools::document()
devtools::check()
devtools::check()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::load_all()
devtools::build()
devtools::install()
library(maccaindex)
maccaindex::macca_inflation_plot("usd")
maccaindex::macca_inflation_plot("fsdfsdf")
devtools::document()
devtools::check()
devtools::load_all()
devtools::check()
?macca
?macca_plot
devtools::document()
?macca_plot
?macca_inflation_plot
library(maccaindex)
?maccapp
?mutate
library(dplyr)
?mutate
usethis::use_test()
#' Magic Wand DataFrame
#'
#' A function that generates a customized data frame based on the input vectors.
#'
#' @importFrom stats cor quantile xtabs
#' @param vectorx A vector of values (either a numerical, character, factor).
#' @param vectory A vector of values (optional).
#'
#' @return A customized data frame based on the input vectors.
#'   - If \code{vectorx} is a numerical vector of at least 5 values, returns a data frame with two columns:
#'     - Names: the names of the values (Minimum, Lower Hinge, Q1, Median, Q3, Upper Hinge, Maximum)
#'     - Values: the corresponding summary values
#'   - If \code{vectorx} is a character or factor vector, returns a data frame with two columns:
#'     - Values: the unique values in \code{vectorx}
#'     - Frequencies: the frequencies of each value
#'   - If both \code{vectorx} and \code{vectory} are numerical vectors of the same size, returns a data frame with one column:
#'     - Coefficient: the correlation coefficient between \code{vectorx} and \code{vectory}
#'   - If one of \code{vectorx} or \code{vectory} is numerical and the other is a character or factor vector, returns a data frame with two columns:
#'     - Levels: the unique levels in the character/factor vector
#'     - Mean: the mean value of the numerical vector for each level
#'   - If both \code{vectorx} and \code{vectory} are character/factor vectors, returns a data frame representing the cross-tabulation of \code{vectorx} and \code{vectory}
#'
#' @examples
#' # Single argument functionality
#' vectorx <- c(1, 2, 3, 4, 5)
#' result <- magicwand_df(vectorx)
#' print(result)
#'
#' # Two-argument functionality
#' vectorx <- c(1, 2, 3)
#' vectory <- c("apple", "banana", "apple")
#' result <- magicwand_df(vectorx, vectory)
#' print(result)
#'
#' @export
#'
magicwand_df <- function(vectorx, vectory = NULL) {
if (!is.null(vectorx) && is.null(vectory)) {
if (is.numeric(vectorx) && length(vectorx) >= 5) {
minimum <- min(vectorx)
Q1 <- quantile(vectorx, probs = 0.25)
median <- median(vectorx)
Q3 <- quantile(vectorx, probs = 0.75)
maximum <- max(vectorx)
lower_hinge <- median(vectorx[vectorx <= median])
upper_hinge <- median(vectorx[vectorx >= median])
summary_df <-
data.frame(
Names = c(
"Minimum",
"Lower Hinge",
"Q1",
"Median",
"Q3",
"Upper Hinge",
"Maximum"
),
Values = c(minimum, lower_hinge, Q1, median, Q3, upper_hinge, maximum)
)
return(summary_df)
} else if (is.character(vectorx) || is.factor(vectorx)) {
count <- table(vectorx)
count_df <- data.frame(Values = names(count),
Frequencies = as.numeric(count))
return(count_df)
} else {
return("Invalid inputs...please refer to the documentation at ?magicwand_df...")
}
} else if (!is.null(vectorx) && !is.null(vectory)) {
if (length(vectorx) == length(vectory)) {
if (is.numeric(vectorx) && is.numeric(vectory)) {
correlation <- cor(vectorx, vectory)
format_corr <- data.frame(Coefficient = correlation)
return(format_corr)
} else if (is.numeric(vectorx) &&
(is.character(vectory) || is.factor(vectory))) {
levels <- unique(vectory)
mean_values <- tapply(vectorx, vectory, mean)
mean_df_y_ver <- data.frame(Levels = levels, Mean = mean_values, row.names = NULL)
return(mean_df_y_ver)
} else if (is.numeric(vectory) &&
(is.character(vectorx) || is.factor(vectorx))) {
levels <- unique(vectorx)
mean_values <- tapply(vectory, vectorx, mean)
mean_df_x_ver <- data.frame(Levels = levels, Mean = mean_values, row.names = NULL)
return(mean_df_x_ver)
} else if (is.character(vectorx) ||
is.factor(vectorx) && is.character(vectory) || is.factor(vectory)) {
cross_table <- xtabs(~ vectorx + vectory)
cross_table_df <- as.data.frame.matrix(cross_table)
return(cross_table_df)
} else {
return(
"Invalid data types...please refer to the documentation at ?magicwand_df..."
)
}
} else {
return("Vectors have different lengths...please try again...")
}
} else {
return("Invalid Argument...please refer to the documentation at ?magicwand_df...")
}
}
vectorx <- c(1, 2, 3, 4, 5)
magicwand_df(vectorx)
vectorx <- c("apple", "banana", "apple")
vectory <- c("red", "yellow", "red")
magicwand_df(vectorx, vectory)
expected_output <- data.frame(
"apple" = c(2, 0),
"banana" = c(0, 1)
)
expected_output
vectorx <- c("apple", "banana", "apple")
vectory <- c("red", "yellow", "red")
expected_output <- data.frame(
"red" = c(2, 0),
"yellow" = c(0, 1)
)
rownames(expected_output) <- c("apple", "banana")
expected_output
vectorx <- c(1, 2, 3)
vectory <- c("red", "yellow")
magicwand_df(vectorx, vectory)
vectorx <- list(1, 2, 3)
magicwand_df(vectorx
)
vectorx <- c(1, 2, 3)
vectory <- c("red", "yellow")
magicwand_df(vectorx, vectory)
expected_output <- "Invalid Argument...please refer to the documentation at ?magicwand_df..."
magicwand_df(vectorx, vectory) == expected_output
class(expected_output)
class("Invalid Argument...please refer to the documentation at ?magicwand_df...")
type(magicwand_df(vectorx, vectory))
devtools::test_active_file()
devtools::test_active_file()
devtools::test_active_file()
devtools::test()
devtools::load_all()
test_check("maccaindex")
library(testthat)
library(maccaindex)
test_check("maccaindex")
devtools::check()
